aargh
abaca
abaci
aback
abaft
abase
abash
abate
abbey
abbot
abeam
abend
abets
abhor
abide
abled
abler
abode
abort
about
above
absit
abuse
abuts
abuzz
abyss
ached
aches
achoo
acids
acing
acked
acmes
acned
acnes
acorn
acres
acrid
acted
actin
actor
acute
adage
adapt
added
adder
addle
adept
adieu
adios
adlib
adman
admen
admit
admix
adobe
adopt
adore
adorn
adult
adzes
aegis
aerie
affix
afire
afoot
afore
afoul
after
again
agape
agars
agate
agave
agent
agile
aging
agley
aglow
agone
agony
agora
agree
agues
ahead
ahhhh
ahold
ahoys
aided
aider
aides
ailed
aimed
aimer
    setCurrentCol(0);
    setWon(false);
    setGameOver(false);
    setCellColors(Array(6).fill(Array(5).fill("#ffffff")));
    inputRef.current.focus();
  };

  return (
    <Box
      sx={{
        display: "flex",
        flexDirection: "column",
        alignItems: "center",
        justifyContent: "center",
        minHeight: "80vh",
        padding: 2,
      }}
    >
      <Button
        variant="contained"
        color="primary"
        sx={{ backgroundColor: "red" }}
        onClick={handleRestart}
      >
        Restart Game
      </Button>
      <Box
        sx={{ display: "flex", flexDirection: "column", gap: 1, marginTop: 4 }}
      >
        {grid.map((row, rowIndex) => (
          <Box key={rowIndex} sx={{ display: "flex", gap: 1 }}>
            {row.map((letter, colIndex) => (
              <Box
                key={colIndex}
                sx={{
                  width: 60,
                  height: 60,
                  border: "2px solid #d3d6da",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                  fontSize: 32,
                  fontWeight: "bold",
                  textTransform: "uppercase",
                  backgroundColor: cellColors[rowIndex][colIndex],
                  borderColor:
                    rowIndex === currentRow &&
                    colIndex === currentCol &&
                    !gameOver
                      ? "#000"
                      : "#d3d6da",
                  borderWidth:
                    rowIndex === currentRow && colIndex === currentCol
                      ? "3px"
                      : "2px",
                }}
                onClick={() => handleCellClick(rowIndex, colIndex)}
              >
                {letter}
              </Box>
            ))}
          </Box>
        ))}
      </Box>
      {/* Show input only on mobile */}
      {isMobile && (
        <TextField
          inputRef={inputRef}
          sx={{ opacity: 0, position: "absolute", pointerEvents: "none" }}
          onChange={handleInputChange}
          autoFocus
        />
      )}
      <Dialog open={showDialog} onClose={() => setShowDialog(false)}>
        <DialogTitle>{won ? "Congratulations!" : "Game Over"}</DialogTitle>
        <DialogContent>
          <Typography>
            {won
              ? "You guessed the word correctly!"
              : `The word was: ${word.toUpperCase()}`}
          </Typography>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setShowDialog(false)} color="primary">
            Close
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};